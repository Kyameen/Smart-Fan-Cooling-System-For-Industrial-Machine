% SMART FAN COOLING SYSTEM - GUIDE VERSION (FIXED)
% Ensure GUI components are tagged as:
% Edit Texts: editAmbientTemp, editLoad, editMaxTemp, editInitialTemp, editSimTime
% Push Button: btnRunSim
% Axes: axesTempPlot, axesFanPlot, axes3DPlot (optional)

function varargout = mainGUI(varargin)
    gui_Singleton = 1;
    gui_State = struct('gui_Name', mfilename, ...
        'gui_Singleton', gui_Singleton, ...
        'gui_OpeningFcn', @mainGUI_OpeningFcn, ...
        'gui_OutputFcn', @mainGUI_OutputFcn, ...
        'gui_LayoutFcn', [], ...
        'gui_Callback', []);

    if nargin && ischar(varargin{1})
        gui_State.gui_Callback = str2func(varargin{1});
    end

    if nargout
        [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
    else
        gui_mainfcn(gui_State, varargin{:});
    end
end

function mainGUI_OpeningFcn(hObject, eventdata, handles, varargin)
    handles.output = hObject;
    guidata(hObject, handles);
end

function varargout = mainGUI_OutputFcn(hObject, eventdata, handles)
    varargout{1} = handles.output;
end
function editAmbientTemp_CreateFcn(hObject, eventdata, handles)
% This function is auto-generated by GUIDE for GUI initialization.
% You can leave it empty if no custom initialization is needed.
end
function editAmbientTemp_Callback(hObject, eventdata, handles)
    val = get(hObject, 'String');

    % If it's still placeholder or empty, set it to 0
    if contains(val, 'e.g.') || isempty(val)
        set(hObject, 'String', '0');
        uicontrol(hObject);  % optional: highlights the box
    end
end



function editLoad_Callback(hObject, eventdata, handles), end
function editLoad_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject, 'BackgroundColor', 'white');
    end
end

function editMaxTemp_Callback(hObject, eventdata, handles), end
function editMaxTemp_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject, 'BackgroundColor', 'white');
    end
end

function editInitialTemp_Callback(hObject, eventdata, handles), end
function editInitialTemp_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject, 'BackgroundColor', 'white');
    end
end

function editSimTime_Callback(hObject, eventdata, handles), end
function editSimTime_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject, 'BackgroundColor'), get(0, 'defaultUicontrolBackgroundColor'))
        set(hObject, 'BackgroundColor', 'white');
    end
end

% --- MAIN SIMULATION BUTTON ---

function btnRunSim_Callback(hObject, eventdata, handles)
    % MENU: Select Fan Control Mode
    mode = menu('Select Fan Control Mode:', 'Automatic', 'Manual');
    disp(['Selected Mode: ', num2str(mode)]);

    % Collect inputs from GUI
    Ta = str2double(get(handles.editAmbientTemp, 'String'));
    L = str2double(get(handles.editLoad, 'String'));
    Tmax = str2double(get(handles.editMaxTemp, 'String'));
    T0 = str2double(get(handles.editInitialTemp, 'String'));
    sim_time = str2double(get(handles.editSimTime, 'String'));

    if any(isnan([Ta, L, Tmax, T0, sim_time]))
        errordlg('All fields must be filled with numeric values.', 'Input Error');
        return;
    end

    % Initialize & simulate
    params = struct('Ta', Ta, 'L', L, 'Tmax', Tmax, 'T0', T0, 'sim_time', sim_time);
    state = initialize_system(params);
    state = simulate_smart_fan(state, params); 

    

    % Plot 1 - Temperature
    axes(handles.axesTempPlot); cla reset;
    plot(state.time, state.T, 'b', 'LineWidth', 2);
    xlabel('Time (s)'); ylabel('Temperature (Â°C)');
    title('Temperature Over Time'); grid on;

    % Plot 2 - Fan Speed
    axes(handles.axesFanPlot); cla reset;
    stairs(state.time, fan_speed_to_numeric(state.FanSpeed), 'r', 'LineWidth', 2);
    ylim([-0.5, 3.5]); yticks(0:3); yticklabels({'Off', 'Low', 'Medium', 'High'});
    xlabel('Time (s)'); ylabel('Fan Speed Level');
    title('Fan Speed Over Time'); grid on;

    % Plot 3 - 3D (optional)
    if isfield(handles, 'axes3DPlot')
        axes(handles.axes3DPlot); cla reset;
        [X, Y] = meshgrid(state.time, 1:5);
        Z = repmat(state.T, 5, 1);
        surf(X, Y, Z); xlabel('Time'); ylabel('Fan Layer'); zlabel('Temperature');
        title('3D Surface of Temperature'); grid on;
    end

    % Summary
    disp(['Simulation steps: ', num2str(length(state.time))]);
    disp(['Temperature size: ', mat2str(size(state.T))]);
    disp('Simulation completed.');
end
